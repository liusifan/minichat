/* seq_tool_main.cpp

 Generated by phxrpc_pb2tool from seq.proto

*/

#include <time.h>
#include <unistd.h>
#include <stdlib.h>
#include <string.h>

#include "phxrpc_seq_tool.h"
#include "seq_tool_impl.h"

#include "seq_client.h"

#include "phxrpc/file.h"

using namespace phxrpc;

void showUsage( const char * program )
{
    printf( "\nUsage: %s [-f <func>] [-v]\n", program );

    SeqTool::Name2Func_t * name2func = SeqTool::GetName2Func();

    for( int i = 0; ; i++ ) {
        SeqTool::Name2Func_t * iter = &( name2func[i] );

        if( NULL == iter->name ) break;

        printf( "    -f %s %s\n", iter->name, iter->usage );
    }
    printf( "\n" );
    exit( 0 );
}

int main( int argc, char * argv[] )
{
    const char * func = NULL;

    for( int i = 1; i < argc - 1; i++ ) {
        if( 0 == strcmp( argv[i], "-f" ) ) {
            func = argv[ ++i ];
        }
        if( 0 == strcmp( argv[i], "-v" ) ) {
            showUsage( argv[0] );
        }
    }

    if( NULL == func ) showUsage( argv[0] );

    SeqTool::Name2Func_t * target = NULL;

    SeqTool::Name2Func_t * name2func = SeqTool::GetName2Func();

    for( int i = 0; i < 100; i++ ) {
        SeqTool::Name2Func_t * iter = &( name2func[i] );

        if( NULL == iter->name ) break;

        if( 0 == strcasecmp( func, iter->name ) ) {
            target = iter;
            break;
        }
    }

    if( NULL == target ) showUsage( argv[0] );

    OptMap opt_map( target->opt_string );

    if( ! opt_map.Parse( argc, argv ) ) showUsage( argv[0] );

    phxrpc::openlog( argv[0], "~/log", 7 );

    SeqTool::ToolFunc_t targefunc = target->func;

    SeqToolImpl tool;

    if( 0 != ( tool.*targefunc ) ( opt_map ) ) showUsage( argv[0] );

    phxrpc::closelog();

    return 0;
}

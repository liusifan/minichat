/* seq_client.cpp

 Generated by phxrpc_pb2client from seq.proto

*/

#include <iostream>
#include <memory>
#include <stdlib.h>
#include <mutex>

#include "seq_client.h"
#include "phxrpc_seq_stub.h"

#include "phxrpc/file.h"
#include "phxrpc/rpc.h"

static phxrpc::ClientMonitorPtr global_seqclient_monitor_;

class SeqClientRegister
{
public:
    SeqClientRegister() {
        phxrpc::ClientConfigRegistry::GetDefault()->Register("seq");
    }
    ~SeqClientRegister() {

    }
};

static SeqClientRegister g_seqclient_register;

SeqClient :: SeqClient()
{
    package_name_ = std::string("seq");
    config_ = phxrpc::ClientConfigRegistry::GetDefault()->GetConfig("seq");
    if(!config_) {
        return;
    }

    static std::mutex monitor_mutex;
    if ( !global_seqclient_monitor_.get() ) { 
        monitor_mutex.lock();
        if ( !global_seqclient_monitor_.get() ) {
            global_seqclient_monitor_ = phxrpc::MonitorFactory::GetFactory()
                ->CreateClientMonitor(config_->GetOssId());
        }
        config_->SetClientMonitor( global_seqclient_monitor_ );
        monitor_mutex.unlock();
    }
}

SeqClient :: ~SeqClient()
{
}

int SeqClient :: PHXEcho( const google::protobuf::StringValue & req,
        google::protobuf::StringValue * resp )
{
    if(!config_) {
        phxrpc::log(LOG_ERR, "%s %s config is NULL", __func__, package_name_.c_str());
        return -1;
    }

    int ret = phxrpc::ClientCall( *config_, *(global_seqclient_monitor_.get()),
            [=,&req,&resp]( phxrpc::BaseTcpStream & socket ) -> int {
                SeqStub stub( socket, *(global_seqclient_monitor_.get()) );
                stub.SetConfig( config_ );
                return stub.PHXEcho( req, resp );
            },
            [=]( phxrpc::ClientConfig config ) -> const phxrpc::Endpoint_t * {
                return config.GetRandom();
            }
    );

    return ret;
}

int SeqClient :: PhxBatchEcho( const google::protobuf::StringValue & req,
        google::protobuf::StringValue * resp )
{
    if(!config_) {
        phxrpc::log(LOG_ERR, "%s %s config is NULL", __func__, package_name_.c_str());
        return -1;
    }
    int ret = -1; 
    size_t echo_server_count = 2;
    uthread_begin;
    for (size_t i = 0; i < echo_server_count; i++) {
        uthread_t [=, &uthread_s, &ret](void *) {
            const phxrpc::Endpoint_t * ep = config_->GetByIndex(i);
            if (ep != nullptr) {
                phxrpc::UThreadTcpStream socket;
                if(phxrpc::PhxrpcTcpUtils::Open(&uthread_s, &socket, ep->ip, ep->port,
                            config_->GetConnectTimeoutMS(), *(global_seqclient_monitor_.get()))) { 
                    socket.SetTimeout(config_->GetSocketTimeoutMS());
                    SeqStub stub(socket, *(global_seqclient_monitor_.get()));
                    stub.SetConfig(config_);
                    int this_ret = stub.PHXEcho(req, resp);
                    if (this_ret == 0) {
                        ret = this_ret;
                        uthread_s.Close();
                    }   
                }   
            }
        };  
    }   
    uthread_end;
    return ret;
}

int SeqClient :: Alloc( const seq::AllocReq & req,
        google::protobuf::UInt32Value * resp )
{
    if(!config_) {
        phxrpc::log(LOG_ERR, "%s %s config is NULL", __func__, package_name_.c_str());
        return -1;
    }

    int ret = phxrpc::ClientCall( *config_, *(global_seqclient_monitor_.get()),
            [=,&req,&resp]( phxrpc::BaseTcpStream & socket ) -> int {
                SeqStub stub( socket, *(global_seqclient_monitor_.get()) );
                stub.SetConfig( config_ );
                return stub.Alloc( req, resp );
            },
            [=]( phxrpc::ClientConfig config ) -> const phxrpc::Endpoint_t * {
                return config.GetRandom();
            }
    );

    return ret;
}

int SeqClient :: Get( const google::protobuf::StringValue & req,
        seq::SyncKey * resp )
{
    if(!config_) {
        phxrpc::log(LOG_ERR, "%s %s config is NULL", __func__, package_name_.c_str());
        return -1;
    }

    int ret = phxrpc::ClientCall( *config_, *(global_seqclient_monitor_.get()),
            [=,&req,&resp]( phxrpc::BaseTcpStream & socket ) -> int {
                SeqStub stub( socket, *(global_seqclient_monitor_.get()) );
                stub.SetConfig( config_ );
                return stub.Get( req, resp );
            },
            [=]( phxrpc::ClientConfig config ) -> const phxrpc::Endpoint_t * {
                return config.GetRandom();
            }
    );

    return ret;
}


